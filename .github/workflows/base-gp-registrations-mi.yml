name: 'gp-registrations-mi-task'
on:
  workflow_call:
    inputs:
      environment:
        description: "Which Environment settings to use."
        required: true
        type: "string"
        default: "dev"

jobs:
  terraform_process:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-skip-session-tagging: true

      - name: View AWS Role
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./stacks/gp-registrations-mi/terraform

      - name: Terraform Init
        id: init
        run: | 
          terraform init -backend-config="key=${{ secrets.AWS_STATE_S3_KEY }}" \
          -backend-config="bucket=${{ secrets.AWS_STATE_BUCKET }}" \
          -backend-config="dynamodb_table=${{ secrets.AWS_STATE_LOCK_TABLE }}"
        working-directory: ./stacks/gp-registrations-mi/terraform
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./stacks/gp-registrations-mi/terraform

      - name: Build Lambdas
        run: | 
            ./tasks build-lambda

      - name: Set up Python
        if: github.ref == 'refs/heads/master'
        uses: actions/setup-python@v5

      - name: Make virtual environment
        if: github.ref == 'refs/heads/master'
        run: |
            python3 -m venv ./venv
            ./venv/bin/pip3 install --upgrade pip requests

      - name: Get ODS CSV Files
        if: github.ref == 'refs/heads/master'
        run: |
          PYTHONPATH=$PYTHONPATH:. ./venv/bin/python3 stacks/gp-registrations-mi/scripts/get_latest_ods_csv.py ${{ secrets.TRUD_API_KEY }} ${{ vars.TRUD_API_URL }}

      - name: Setup Terraform variables
        id: vars
        run: |-
          IMAGE_TAG=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY_NAME }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]')
          cat > pipeline.auto.tfvars <<EOF
          gp_registrations_mi_image_tag = $IMAGE_TAG
          environment = "${{ inputs.environment }}"
          EOF
        working-directory: ./stacks/gp-registrations-mi/terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -var-file="../vars/${{ inputs.environment }}.tfvars" -out "${{ inputs.environment }}.tfplan"
        working-directory: ./stacks/gp-registrations-mi/terraform
        shell: bash

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve -input=false tf.plan
        working-directory: ./stacks/gp-registrations-mi/terraform